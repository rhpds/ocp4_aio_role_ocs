---
# vim: set ft=ansible:
- name: Get OCP version to use
  ansible.builtin.set_fact:
    ocp4_aio_subversion: "{{ ocp4_aio_ocp_version.split('latest-')[1] if ('latest' in ocp4_aio_ocp_version) else ocp4_aio_ocp_version.split('stable-')[1] if ('stable' in ocp4_aio_ocp_version) else ocp4_aio_ocp_version.split('candidate-')[1] if ('candidate' in ocp4_aio_ocp_version) else ocp4_aio_ocp_version.split('.')[:2] | join('.') }}"

- name: Label nodes for OpenShift Storage when compact
  when: ocp4_aio_deploy_compact or hostvars['localhost']['override_deploy_compact']
  ansible.builtin.command: >
    oc label nodes --overwrite ocp4-{{ item.key }}.aio.example.com cluster.ocs.openshift.io/openshift-storage=''
  with_dict: "{{ vms['masters'] }}"

- name: Label nodes for OpenShift Storage when not compact
  when: not ocp4_aio_deploy_compact
  ansible.builtin.command: >
    oc label nodes --overwrite ocp4-{{ item.key }}.aio.example.com cluster.ocs.openshift.io/openshift-storage=''
  with_dict: "{{ vms['workers'] }}"

- name: Copy over k8s-aio env requirements.txt
  ansible.builtin.copy:
    src: requirements.txt
    dest: /tmp/requirements.txt
    mode: "0664"

- name: "Create k8s-aio venv"
  ansible.builtin.pip:
    requirements: "/tmp/requirements.txt"
    virtualenv: "/opt/virtualenvs/k8s-aio"
    virtualenv_site_packages: true
    virtualenv_command: "/usr/bin/virtualenv"

- name: "Set Ansible interpreter to venv"
  ansible.builtin.set_fact:
    ansible_python_interpreter: /opt/virtualenvs/k8s-aio/bin/python

- name: Apply local-storage-operator configuration
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', 'local-storage-operator.yaml') }}"
  register: local_storage_success
  retries: 20
  delay: 30
  until: local_storage_success is not failed

- name: Apply local-volume configuration
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', 'local-volume.yaml') }}"
  register: local_volume_success
  retries: 100
  delay: 30
  until: local_volume_success is not failed

- name: Apply odf-operator configuration
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'odf-operator.yaml.j2') }}"
  register: ocs_operator_success
  retries: 20
  delay: 30
  until: ocs_operator_success is not failed

- name: Apply storage-cluster configuration
  when: not ocp4_aio_nanodf and not ocp4_aio_odflite
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', 'storage-cluster.yaml') }}"
  register: storage_cluster_success
  retries: 20
  delay: 30
  until: storage_cluster_success is not failed

- name: Apply lightweight storage-cluster configuration
  when:
  - not ocp4_aio_nanodf | bool
  - ocp4_aio_odflite | bool
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', 'storage-cluster-lite.yaml') }}"
  register: storage_cluster_success
  retries: 20
  delay: 30
  until: storage_cluster_success is not failed

- name: Apply Extra config for rook for ODF Nano
  when: ocp4_aio_nanodf | bool
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', 'nanodf-config.yaml') }}"
  register: nanodf_config_success
  retries: 20
  delay: 30
  until: nanodf_config_success is not failed

- name: Apply storage-cluster configuration for ODF Nano
  when: ocp4_aio_nanodf | bool
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', 'storage-cluster-nano.yaml') }}"
  register: storage_cluster_success
  retries: 20
  delay: 30
  until: storage_cluster_success is not failed

- name: Unset default storage class for nfs
  when: ocp4_aio_deploy_nfs | bool
  ansible.builtin.command: >
    oc patch storageclass nfs
    -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"false"}}}'
  register: default_nfsclass_success
  retries: 1
  delay: 30
  until: default_nfsclass_success is not failed

- name: Set default storage class to be ocs-storagecluster-ceph-rbd
  ansible.builtin.command: >
    oc patch storageclass ocs-storagecluster-ceph-rbd
    -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'
  register: default_class_success
  retries: 30
  delay: 30
  until: default_class_success is not failed

- name: Create PVC for the Image Registry on OCS
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', 'ceph-imgreg-pvc.yaml') }}"
  register: imgreg_volume_success
  retries: 5
  delay: 30
  until: imgreg_volume_success is not failed

- name: Enable OCS based PVC based storage for Image Registry
  ansible.builtin.shell: >
    oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"storage":{"pvc": {"claim": "ocs-imgreg"}}}}'

- name: Enable Ceph Tools pod for troubleshooting
  ansible.builtin.command: >
    oc patch OCSInitialization ocsinit -n openshift-storage
    --type json --patch '[{ "op": "replace", "path": "/spec/enableCephTools", "value": true }]'
  register: ceph_tools_success
  retries: 20
  delay: 30
  until: ceph_tools_success is not failed
